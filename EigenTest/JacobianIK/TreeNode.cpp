//-----------------------------------------------------------------------------
//                             TreeNode
//
// 木構造クラスの定義部
//
// $File: $
// $Author: numaguchi $
// $Date: 2011/10/30 $
// $Revision: 1$
//
//
//-----------------------------------------------------------------------------

//#include "stdafx.h"
#include "TreeNode.h"
#include <algorithm>

//-----------------------------------------------------------------------------
// 説明: デフォルトコンストラクタ
// 引数: 
// 返り値: 
// その他: 
//-----------------------------------------------------------------------------
CTreeNode::CTreeNode()
{
	m_pParent = NULL;
}

//-----------------------------------------------------------------------------
// 説明: デストラクタ
// 引数: 
// 返り値: 
// その他: 
//-----------------------------------------------------------------------------
CTreeNode::~CTreeNode()
{
	Destroy();
}

//-----------------------------------------------------------------------------
// 説明: 子ノードも含めた自ノードの破棄
// 引数: 
// 返り値: 
// その他: 
//-----------------------------------------------------------------------------
void CTreeNode::Destroy()
{
	for (std::vector<CTreeNode*>::iterator it = m_vecChildren.begin();it != m_vecChildren.end();++it)
		(*it)->Destroy();
}

//-----------------------------------------------------------------------------
// 説明: 子ノード追加
// 引数: 
//       child [in] 追加するノード
// 返り値: 
// その他: 
//-----------------------------------------------------------------------------
void CTreeNode::AddChild(CTreeNode *child)
{
	child->SetParent(this);
	m_vecChildren.push_back(child);
}

//-----------------------------------------------------------------------------
// 説明: 子ノード取得
// 引数: 
//       nid [in] 取得したいノードのインデックス
// 返り値: 
//       NULL インデックスが範囲外
//       otherwise ノードへのポインタ
// その他: 
//-----------------------------------------------------------------------------
CTreeNode* CTreeNode::GetChild(size_t nid)
{
	if (nid >= m_vecChildren.size())
		return NULL;
	return m_vecChildren[nid];
}

//-----------------------------------------------------------------------------
// 説明: 子ノード取得(const)
// 引数: 
//       nid [in] 取得したいノードのインデックス
// 返り値: 
//       NULL インデックスが範囲外
//       otherwise ノードへのポインタ(const)
// その他: 
//-----------------------------------------------------------------------------
const CTreeNode* CTreeNode::GetChild(size_t nid) const
{
	if (nid >= m_vecChildren.size())
		return NULL;
	return m_vecChildren[nid];
}

//-----------------------------------------------------------------------------
// 説明: ルートノード取得
// 引数: 
// 返り値: 
//       ルートノードへのポインタ
// その他: 
//-----------------------------------------------------------------------------
CTreeNode* CTreeNode::GetRoot()
{
	CTreeNode *tmp, *node = this;
	while ((tmp = node->GetParent()) != NULL)
		node = tmp;
	return node;
}

//-----------------------------------------------------------------------------
// 説明: ルートノード取得(const)
// 引数: 
// 返り値: 
//       ルートノードへのconstポインタ
// その他: 
//-----------------------------------------------------------------------------
const CTreeNode* CTreeNode::GetRoot() const
{
	const CTreeNode *tmp, *node = this;
	while ((tmp = node->GetParent()) != NULL)
		node = tmp;
	return node;
}

//-----------------------------------------------------------------------------
// 説明: 子ノード検索
// 引数: 
//       node [in] 検索するノード
// 返り値: 
//       NumChildren() 指定ノードは存在しない
//       otherwise 指定ノードのインデックス
// その他: 
//-----------------------------------------------------------------------------
size_t CTreeNode::FindChild(const CTreeNode *node) const
{
	return std::find(m_vecChildren.begin(), m_vecChildren.end(), node) - m_vecChildren.begin();
}

//-----------------------------------------------------------------------------
// 説明: ノード削除
// 引数: 
//       nid [in] 削除するノードのインデックス
// 返り値: 
//       true 削除成功
//       false 削除失敗，もしくは指定ノードが存在しない
// その他: 
//-----------------------------------------------------------------------------
bool CTreeNode::RemoveNode(size_t nid)
{
	if (nid >= m_vecChildren.size())
		return false;
	m_vecChildren.erase(m_vecChildren.begin() + nid);
	return true;
}

